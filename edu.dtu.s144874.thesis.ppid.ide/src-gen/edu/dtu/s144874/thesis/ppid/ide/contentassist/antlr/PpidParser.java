/*
 * generated by Xtext 2.24.0
 */
package edu.dtu.s144874.thesis.ppid.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.dtu.s144874.thesis.ppid.ide.contentassist.antlr.internal.InternalPpidParser;
import edu.dtu.s144874.thesis.ppid.services.PpidGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PpidParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PpidGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PpidGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives_1(), "rule__Model__Alternatives_1");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getUpdateAccess().getAlternatives(), "rule__Update__Alternatives");
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getExpressionPartAccess().getAlternatives(), "rule__ExpressionPart__Alternatives");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getAlternatives(), "rule__StatefulPropertyReference__Alternatives");
			builder.put(grammarAccess.getGlobalVarAccess().getAssignmentAlternatives_4_1_0(), "rule__GlobalVar__AssignmentAlternatives_4_1_0");
			builder.put(grammarAccess.getSetVarCommandAccess().getAssignmentAlternatives_4_0(), "rule__SetVarCommand__AssignmentAlternatives_4_0");
			builder.put(grammarAccess.getConnectionTypeAccess().getAlternatives(), "rule__ConnectionType__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
			builder.put(grammarAccess.getSinkAccess().getGroup(), "rule__Sink__Group__0");
			builder.put(grammarAccess.getArrayTypeAccess().getGroup(), "rule__ArrayType__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getOutputPropertyAccess().getGroup(), "rule__OutputProperty__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_3(), "rule__Output__Group_3__0");
			builder.put(grammarAccess.getActivityAccess().getGroup(), "rule__Activity__Group__0");
			builder.put(grammarAccess.getPredicatesAccess().getGroup(), "rule__Predicates__Group__0");
			builder.put(grammarAccess.getPredicatesAccess().getGroup_1(), "rule__Predicates__Group_1__0");
			builder.put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
			builder.put(grammarAccess.getTriggerAccess().getGroup(), "rule__Trigger__Group__0");
			builder.put(grammarAccess.getTriggerAccess().getGroup_2(), "rule__Trigger__Group_2__0");
			builder.put(grammarAccess.getOutputCommandAccess().getGroup(), "rule__OutputCommand__Group__0");
			builder.put(grammarAccess.getExtendedExpressionAccess().getGroup(), "rule__ExtendedExpression__Group__0");
			builder.put(grammarAccess.getRightExpressionAccess().getGroup(), "rule__RightExpression__Group__0");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getGroup_0(), "rule__StatefulPropertyReference__Group_0__0");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getGroup_1(), "rule__StatefulPropertyReference__Group_1__0");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getGroup_1_0(), "rule__StatefulPropertyReference__Group_1_0__0");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getGroup_1_1(), "rule__StatefulPropertyReference__Group_1_1__0");
			builder.put(grammarAccess.getGlobalVarAccess().getGroup(), "rule__GlobalVar__Group__0");
			builder.put(grammarAccess.getGlobalVarAccess().getGroup_4(), "rule__GlobalVar__Group_4__0");
			builder.put(grammarAccess.getSetVarCommandAccess().getGroup(), "rule__SetVarCommand__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getUpdateAboveAccess().getGroup(), "rule__UpdateAbove__Group__0");
			builder.put(grammarAccess.getUpdateBelowAccess().getGroup(), "rule__UpdateBelow__Group__0");
			builder.put(grammarAccess.getUpdateChangeAccess().getGroup(), "rule__UpdateChange__Group__0");
			builder.put(grammarAccess.getUpdateIsAccess().getGroup(), "rule__UpdateIs__Group__0");
			builder.put(grammarAccess.getUpdateNotAccess().getGroup(), "rule__UpdateNot__Group__0");
			builder.put(grammarAccess.getModelAccess().getGlobalsVarsAssignment_0(), "rule__Model__GlobalsVarsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getEntitesAssignment_1_0(), "rule__Model__EntitesAssignment_1_0");
			builder.put(grammarAccess.getModelAccess().getSourcesAssignment_1_1(), "rule__Model__SourcesAssignment_1_1");
			builder.put(grammarAccess.getModelAccess().getSinksAssignment_1_2(), "rule__Model__SinksAssignment_1_2");
			builder.put(grammarAccess.getModelAccess().getProcessesAssignment_1_3(), "rule__Model__ProcessesAssignment_1_3");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getPropertiesAssignment_3(), "rule__Entity__PropertiesAssignment_3");
			builder.put(grammarAccess.getSourceAccess().getNameAssignment_1(), "rule__Source__NameAssignment_1");
			builder.put(grammarAccess.getSourceAccess().getTopicAssignment_2(), "rule__Source__TopicAssignment_2");
			builder.put(grammarAccess.getSourceAccess().getEntityAssignment_3(), "rule__Source__EntityAssignment_3");
			builder.put(grammarAccess.getSinkAccess().getNameAssignment_1(), "rule__Sink__NameAssignment_1");
			builder.put(grammarAccess.getSinkAccess().getEntityAssignment_2(), "rule__Sink__EntityAssignment_2");
			builder.put(grammarAccess.getArrayTypeAccess().getTypeAssignment_1(), "rule__ArrayType__TypeAssignment_1");
			builder.put(grammarAccess.getEntityReferenceAccess().getEntityAssignment(), "rule__EntityReference__EntityAssignment");
			builder.put(grammarAccess.getSimpleDataTypeAccess().getTypeAssignment(), "rule__SimpleDataType__TypeAssignment");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_2(), "rule__Property__TypeAssignment_2");
			builder.put(grammarAccess.getOutputPropertyAccess().getNameAssignment_0(), "rule__OutputProperty__NameAssignment_0");
			builder.put(grammarAccess.getOutputPropertyAccess().getExpAssignment_2(), "rule__OutputProperty__ExpAssignment_2");
			builder.put(grammarAccess.getOutputAccess().getPropertiesAssignment_2(), "rule__Output__PropertiesAssignment_2");
			builder.put(grammarAccess.getOutputAccess().getPropertiesAssignment_3_1(), "rule__Output__PropertiesAssignment_3_1");
			builder.put(grammarAccess.getActivityAccess().getNameAssignment_1(), "rule__Activity__NameAssignment_1");
			builder.put(grammarAccess.getActivityAccess().getTriggerAssignment_3(), "rule__Activity__TriggerAssignment_3");
			builder.put(grammarAccess.getPredicatesAccess().getPredicatesAssignment_0(), "rule__Predicates__PredicatesAssignment_0");
			builder.put(grammarAccess.getPredicatesAccess().getPredicatesAssignment_1_1(), "rule__Predicates__PredicatesAssignment_1_1");
			builder.put(grammarAccess.getPredicateAccess().getSourceAssignment_0(), "rule__Predicate__SourceAssignment_0");
			builder.put(grammarAccess.getPredicateAccess().getPropertyAssignment_2(), "rule__Predicate__PropertyAssignment_2");
			builder.put(grammarAccess.getPredicateAccess().getUpdateAssignment_4(), "rule__Predicate__UpdateAssignment_4");
			builder.put(grammarAccess.getTriggerAccess().getPredicatesAssignment_1(), "rule__Trigger__PredicatesAssignment_1");
			builder.put(grammarAccess.getTriggerAccess().getCommandAssignment_2_1(), "rule__Trigger__CommandAssignment_2_1");
			builder.put(grammarAccess.getOutputCommandAccess().getOutputAssignment_0(), "rule__OutputCommand__OutputAssignment_0");
			builder.put(grammarAccess.getOutputCommandAccess().getSinkAssignment_2(), "rule__OutputCommand__SinkAssignment_2");
			builder.put(grammarAccess.getExtendedExpressionAccess().getLeftAssignment_0(), "rule__ExtendedExpression__LeftAssignment_0");
			builder.put(grammarAccess.getExtendedExpressionAccess().getRightAssignment_1(), "rule__ExtendedExpression__RightAssignment_1");
			builder.put(grammarAccess.getRightExpressionAccess().getOperatorAssignment_0(), "rule__RightExpression__OperatorAssignment_0");
			builder.put(grammarAccess.getRightExpressionAccess().getExpAssignment_1(), "rule__RightExpression__ExpAssignment_1");
			builder.put(grammarAccess.getExpressionPartAccess().getRefAssignment_0(), "rule__ExpressionPart__RefAssignment_0");
			builder.put(grammarAccess.getExpressionPartAccess().getValueAssignment_1(), "rule__ExpressionPart__ValueAssignment_1");
			builder.put(grammarAccess.getExpressionPartAccess().getStringValueAssignment_2(), "rule__ExpressionPart__StringValueAssignment_2");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getSourceAssignment_0_0(), "rule__StatefulPropertyReference__SourceAssignment_0_0");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getPropertyAssignment_0_2(), "rule__StatefulPropertyReference__PropertyAssignment_0_2");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getSourceAssignment_1_0_1(), "rule__StatefulPropertyReference__SourceAssignment_1_0_1");
			builder.put(grammarAccess.getStatefulPropertyReferenceAccess().getPropertyAssignment_1_1_1(), "rule__StatefulPropertyReference__PropertyAssignment_1_1_1");
			builder.put(grammarAccess.getGlobalVarAccess().getNameAssignment_1(), "rule__GlobalVar__NameAssignment_1");
			builder.put(grammarAccess.getGlobalVarAccess().getTypeAssignment_3(), "rule__GlobalVar__TypeAssignment_3");
			builder.put(grammarAccess.getGlobalVarAccess().getAssignmentAssignment_4_1(), "rule__GlobalVar__AssignmentAssignment_4_1");
			builder.put(grammarAccess.getSetVarCommandAccess().getNameAssignment_1(), "rule__SetVarCommand__NameAssignment_1");
			builder.put(grammarAccess.getSetVarCommandAccess().getAssignmentAssignment_4(), "rule__SetVarCommand__AssignmentAssignment_4");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_1(), "rule__Process__NameAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getActivitiesAssignment_3(), "rule__Process__ActivitiesAssignment_3");
			builder.put(grammarAccess.getProcessAccess().getConnectionsAssignment_4(), "rule__Process__ConnectionsAssignment_4");
			builder.put(grammarAccess.getConnectionAccess().getLeftAssignment_0(), "rule__Connection__LeftAssignment_0");
			builder.put(grammarAccess.getConnectionAccess().getConnectionAssignment_1(), "rule__Connection__ConnectionAssignment_1");
			builder.put(grammarAccess.getConnectionAccess().getRightAssignment_2(), "rule__Connection__RightAssignment_2");
			builder.put(grammarAccess.getUpdateAboveAccess().getNAssignment_2(), "rule__UpdateAbove__NAssignment_2");
			builder.put(grammarAccess.getUpdateBelowAccess().getNAssignment_2(), "rule__UpdateBelow__NAssignment_2");
			builder.put(grammarAccess.getUpdateChangeAccess().getNAssignment_2(), "rule__UpdateChange__NAssignment_2");
			builder.put(grammarAccess.getUpdateChangeAccess().getMAssignment_4(), "rule__UpdateChange__MAssignment_4");
			builder.put(grammarAccess.getUpdateIsAccess().getNAssignment_2(), "rule__UpdateIs__NAssignment_2");
			builder.put(grammarAccess.getUpdateNotAccess().getNAssignment_2(), "rule__UpdateNot__NAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PpidGrammarAccess grammarAccess;

	@Override
	protected InternalPpidParser createParser() {
		InternalPpidParser result = new InternalPpidParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PpidGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PpidGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
