/*
 * generated by Xtext 2.24.0
 */
package edu.dtu.s144874.thesis.ppid.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.dtu.s144874.thesis.ppid.ide.contentassist.antlr.internal.InternalPpidParser;
import edu.dtu.s144874.thesis.ppid.services.PpidGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PpidParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PpidGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PpidGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getUpdateAccess().getAlternatives(), "rule__Update__Alternatives");
			builder.put(grammarAccess.getOutputValueAccess().getAlternatives(), "rule__OutputValue__Alternatives");
			builder.put(grammarAccess.getConnectionAccess().getAlternatives(), "rule__Connection__Alternatives");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
			builder.put(grammarAccess.getSinkAccess().getGroup(), "rule__Sink__Group__0");
			builder.put(grammarAccess.getArrayTypeAccess().getGroup(), "rule__ArrayType__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getOutputPropertyAccess().getGroup(), "rule__OutputProperty__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_3(), "rule__Output__Group_3__0");
			builder.put(grammarAccess.getSourceUpdateAccess().getGroup(), "rule__SourceUpdate__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_1(), "rule__Rule__Group_1__0");
			builder.put(grammarAccess.getExtendedRuleAccess().getGroup(), "rule__ExtendedRule__Group__0");
			builder.put(grammarAccess.getExtendedRuleAccess().getGroup_3(), "rule__ExtendedRule__Group_3__0");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getConnectionsAccess().getGroup(), "rule__Connections__Group__0");
			builder.put(grammarAccess.getStartRuleAccess().getGroup(), "rule__StartRule__Group__0");
			builder.put(grammarAccess.getEndRuleAccess().getGroup(), "rule__EndRule__Group__0");
			builder.put(grammarAccess.getUpdateAboveAccess().getGroup(), "rule__UpdateAbove__Group__0");
			builder.put(grammarAccess.getUpdateBelowAccess().getGroup(), "rule__UpdateBelow__Group__0");
			builder.put(grammarAccess.getUpdateChangeAccess().getGroup(), "rule__UpdateChange__Group__0");
			builder.put(grammarAccess.getUpdateIsAccess().getGroup(), "rule__UpdateIs__Group__0");
			builder.put(grammarAccess.getUpdateNotAccess().getGroup(), "rule__UpdateNot__Group__0");
			builder.put(grammarAccess.getModelAccess().getEntitesAssignment_0(), "rule__Model__EntitesAssignment_0");
			builder.put(grammarAccess.getModelAccess().getSourcesAssignment_1(), "rule__Model__SourcesAssignment_1");
			builder.put(grammarAccess.getModelAccess().getSinksAssignment_2(), "rule__Model__SinksAssignment_2");
			builder.put(grammarAccess.getModelAccess().getRulesAssignment_3(), "rule__Model__RulesAssignment_3");
			builder.put(grammarAccess.getModelAccess().getStartAssignment_4(), "rule__Model__StartAssignment_4");
			builder.put(grammarAccess.getModelAccess().getEndAssignment_5(), "rule__Model__EndAssignment_5");
			builder.put(grammarAccess.getModelAccess().getProcessesAssignment_6(), "rule__Model__ProcessesAssignment_6");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getPropertiesAssignment_3(), "rule__Entity__PropertiesAssignment_3");
			builder.put(grammarAccess.getSourceAccess().getNameAssignment_1(), "rule__Source__NameAssignment_1");
			builder.put(grammarAccess.getSourceAccess().getTopicAssignment_2(), "rule__Source__TopicAssignment_2");
			builder.put(grammarAccess.getSourceAccess().getEntityAssignment_3(), "rule__Source__EntityAssignment_3");
			builder.put(grammarAccess.getSinkAccess().getNameAssignment_1(), "rule__Sink__NameAssignment_1");
			builder.put(grammarAccess.getSinkAccess().getEntityAssignment_2(), "rule__Sink__EntityAssignment_2");
			builder.put(grammarAccess.getArrayTypeAccess().getTypeAssignment_1(), "rule__ArrayType__TypeAssignment_1");
			builder.put(grammarAccess.getEntityReferenceAccess().getEntityAssignment(), "rule__EntityReference__EntityAssignment");
			builder.put(grammarAccess.getSimpleDataTypeAccess().getTypeAssignment(), "rule__SimpleDataType__TypeAssignment");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_2(), "rule__Property__TypeAssignment_2");
			builder.put(grammarAccess.getPropertyReferenceAccess().getNameAssignment(), "rule__PropertyReference__NameAssignment");
			builder.put(grammarAccess.getOutputPropertyAccess().getNameAssignment_0(), "rule__OutputProperty__NameAssignment_0");
			builder.put(grammarAccess.getOutputPropertyAccess().getValueAssignment_2(), "rule__OutputProperty__ValueAssignment_2");
			builder.put(grammarAccess.getOutputValueAccess().getValueIntAssignment_0(), "rule__OutputValue__ValueIntAssignment_0");
			builder.put(grammarAccess.getOutputValueAccess().getValueStringAssignment_1(), "rule__OutputValue__ValueStringAssignment_1");
			builder.put(grammarAccess.getOutputValueAccess().getValueRefAssignment_2(), "rule__OutputValue__ValueRefAssignment_2");
			builder.put(grammarAccess.getOutputAccess().getPropertiesAssignment_2(), "rule__Output__PropertiesAssignment_2");
			builder.put(grammarAccess.getOutputAccess().getPropertiesAssignment_3_1(), "rule__Output__PropertiesAssignment_3_1");
			builder.put(grammarAccess.getSourceUpdateAccess().getSourceAssignment_0(), "rule__SourceUpdate__SourceAssignment_0");
			builder.put(grammarAccess.getSourceUpdateAccess().getPropertyAssignment_2(), "rule__SourceUpdate__PropertyAssignment_2");
			builder.put(grammarAccess.getSourceUpdateAccess().getUpdateAssignment_4(), "rule__SourceUpdate__UpdateAssignment_4");
			builder.put(grammarAccess.getRuleAccess().getUpdatesAssignment_0(), "rule__Rule__UpdatesAssignment_0");
			builder.put(grammarAccess.getRuleAccess().getUpdatesAssignment_1_1(), "rule__Rule__UpdatesAssignment_1_1");
			builder.put(grammarAccess.getExtendedRuleAccess().getNameAssignment_1(), "rule__ExtendedRule__NameAssignment_1");
			builder.put(grammarAccess.getExtendedRuleAccess().getRuleAssignment_2(), "rule__ExtendedRule__RuleAssignment_2");
			builder.put(grammarAccess.getExtendedRuleAccess().getOutputAssignment_3_1(), "rule__ExtendedRule__OutputAssignment_3_1");
			builder.put(grammarAccess.getExtendedRuleAccess().getSinkAssignment_5(), "rule__ExtendedRule__SinkAssignment_5");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_1(), "rule__Process__NameAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getStartRuleAssignment_3(), "rule__Process__StartRuleAssignment_3");
			builder.put(grammarAccess.getProcessAccess().getConnectionsAssignment_4(), "rule__Process__ConnectionsAssignment_4");
			builder.put(grammarAccess.getConnectionsAccess().getLeftAssignment_0(), "rule__Connections__LeftAssignment_0");
			builder.put(grammarAccess.getConnectionsAccess().getConnectionAssignment_1(), "rule__Connections__ConnectionAssignment_1");
			builder.put(grammarAccess.getConnectionsAccess().getRightAssignment_2(), "rule__Connections__RightAssignment_2");
			builder.put(grammarAccess.getStartRuleAccess().getRuleAssignment_1(), "rule__StartRule__RuleAssignment_1");
			builder.put(grammarAccess.getEndRuleAccess().getRuleAssignment_1(), "rule__EndRule__RuleAssignment_1");
			builder.put(grammarAccess.getUpdateAboveAccess().getNAssignment_2(), "rule__UpdateAbove__NAssignment_2");
			builder.put(grammarAccess.getUpdateBelowAccess().getNAssignment_2(), "rule__UpdateBelow__NAssignment_2");
			builder.put(grammarAccess.getUpdateChangeAccess().getNAssignment_2(), "rule__UpdateChange__NAssignment_2");
			builder.put(grammarAccess.getUpdateChangeAccess().getMAssignment_4(), "rule__UpdateChange__MAssignment_4");
			builder.put(grammarAccess.getUpdateIsAccess().getNAssignment_2(), "rule__UpdateIs__NAssignment_2");
			builder.put(grammarAccess.getUpdateNotAccess().getNAssignment_2(), "rule__UpdateNot__NAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PpidGrammarAccess grammarAccess;

	@Override
	protected InternalPpidParser createParser() {
		InternalPpidParser result = new InternalPpidParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PpidGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PpidGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
