/*
 * generated by Xtext 2.24.0
 */
package edu.dtu.s144874.thesis.ppid.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PpidGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntitesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntitesEntityParserRuleCall_0_0 = (RuleCall)cEntitesAssignment_0.eContents().get(0);
		private final Assignment cSourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourcesSourceParserRuleCall_1_0 = (RuleCall)cSourcesAssignment_1.eContents().get(0);
		private final Assignment cSinksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSinksSinkParserRuleCall_2_0 = (RuleCall)cSinksAssignment_2.eContents().get(0);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesExtendedRuleParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final Assignment cStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartStartRuleParserRuleCall_4_0 = (RuleCall)cStartAssignment_4.eContents().get(0);
		private final Assignment cEndAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEndEndRuleParserRuleCall_5_0 = (RuleCall)cEndAssignment_5.eContents().get(0);
		private final Assignment cProcessesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProcessesProcessParserRuleCall_6_0 = (RuleCall)cProcessesAssignment_6.eContents().get(0);
		
		////@source(type = 'mqtt', url = "tcp://127.0.0.1:1883", client.id = "siddhidsi", topic = "f/i/state/dsi", 
		////	@map(type = 'json'))
		////define stream SmartFactoryDsiStream (active int, code int, description string, station string, ts string);
		////@sink(type='log') 
		////define stream SiddhiProductionOut (processName string, activityName string, state string, resource string, ts string);
		//Model:
		//	entites+=Entity*
		//	sources+=Source*
		//	sinks+=Sink*
		//	rules+=ExtendedRule*
		//	start=StartRule?
		//	end=EndRule?
		//	processes+=Process*;
		@Override public ParserRule getRule() { return rule; }
		
		//entites+=Entity*
		//sources+=Source*
		//sinks+=Sink*
		//rules+=ExtendedRule*
		//start=StartRule?
		//end=EndRule?
		//processes+=Process*
		public Group getGroup() { return cGroup; }
		
		//entites+=Entity*
		public Assignment getEntitesAssignment_0() { return cEntitesAssignment_0; }
		
		//Entity
		public RuleCall getEntitesEntityParserRuleCall_0_0() { return cEntitesEntityParserRuleCall_0_0; }
		
		//sources+=Source*
		public Assignment getSourcesAssignment_1() { return cSourcesAssignment_1; }
		
		//Source
		public RuleCall getSourcesSourceParserRuleCall_1_0() { return cSourcesSourceParserRuleCall_1_0; }
		
		//sinks+=Sink*
		public Assignment getSinksAssignment_2() { return cSinksAssignment_2; }
		
		//Sink
		public RuleCall getSinksSinkParserRuleCall_2_0() { return cSinksSinkParserRuleCall_2_0; }
		
		//rules+=ExtendedRule*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }
		
		//ExtendedRule
		public RuleCall getRulesExtendedRuleParserRuleCall_3_0() { return cRulesExtendedRuleParserRuleCall_3_0; }
		
		//start=StartRule?
		public Assignment getStartAssignment_4() { return cStartAssignment_4; }
		
		//StartRule
		public RuleCall getStartStartRuleParserRuleCall_4_0() { return cStartStartRuleParserRuleCall_4_0; }
		
		//end=EndRule?
		public Assignment getEndAssignment_5() { return cEndAssignment_5; }
		
		//EndRule
		public RuleCall getEndEndRuleParserRuleCall_5_0() { return cEndEndRuleParserRuleCall_5_0; }
		
		//processes+=Process*
		public Assignment getProcessesAssignment_6() { return cProcessesAssignment_6; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_6_0() { return cProcessesProcessParserRuleCall_6_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	'entity' name=ID '{'
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID '{'
		//properties+=Property*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTopicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTopicSTRINGTerminalRuleCall_2_0 = (RuleCall)cTopicAssignment_2.eContents().get(0);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		
		//Source:
		//	'source' name=ID topic=STRING entity=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'source' name=ID topic=STRING entity=[Entity]
		public Group getGroup() { return cGroup; }
		
		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//topic=STRING
		public Assignment getTopicAssignment_2() { return cTopicAssignment_2; }
		
		//STRING
		public RuleCall getTopicSTRINGTerminalRuleCall_2_0() { return cTopicSTRINGTerminalRuleCall_2_0; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_3_0_1() { return cEntityEntityIDTerminalRuleCall_3_0_1; }
	}
	public class SinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Sink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityEntityCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityEntityCrossReference_2_0.eContents().get(1);
		
		//Sink:
		//	'sink' name=ID entity=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'sink' name=ID entity=[Entity]
		public Group getGroup() { return cGroup; }
		
		//'sink'
		public Keyword getSinkKeyword_0() { return cSinkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_0() { return cEntityEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_0_1() { return cEntityEntityIDTerminalRuleCall_2_0_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	EntityReference | SimpleDataType | ArrayType;
		@Override public ParserRule getRule() { return rule; }
		
		//EntityReference | SimpleDataType | ArrayType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntityReference
		public RuleCall getEntityReferenceParserRuleCall_0() { return cEntityReferenceParserRuleCall_0; }
		
		//SimpleDataType
		public RuleCall getSimpleDataTypeParserRuleCall_1() { return cSimpleDataTypeParserRuleCall_1; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_2() { return cArrayTypeParserRuleCall_2; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayType:
		//	'[' type=Type ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' type=Type ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class EntityReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.EntityReference");
		private final Assignment cEntityAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_0 = (CrossReference)cEntityAssignment.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_0_1 = (RuleCall)cEntityEntityCrossReference_0.eContents().get(1);
		
		//EntityReference:
		//	entity=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment() { return cEntityAssignment; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_0() { return cEntityEntityCrossReference_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_0_1() { return cEntityEntityIDTerminalRuleCall_0_1; }
	}
	public class SimpleDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.SimpleDataType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypePrimitiveTypeEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//SimpleDataType:
		//	type=PrimitiveType;
		@Override public ParserRule getRule() { return rule; }
		
		//type=PrimitiveType
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//PrimitiveType
		public RuleCall getTypePrimitiveTypeEnumRuleCall_0() { return cTypePrimitiveTypeEnumRuleCall_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Property:
		//	name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class PropertyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.PropertyReference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PropertyReference:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Update");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpdateAboveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpdateBelowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpdateChangeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUpdateIsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUpdateNotParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Update:
		//	UpdateAbove | UpdateBelow | UpdateChange | UpdateIs | UpdateNot;
		@Override public ParserRule getRule() { return rule; }
		
		//UpdateAbove | UpdateBelow | UpdateChange | UpdateIs | UpdateNot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UpdateAbove
		public RuleCall getUpdateAboveParserRuleCall_0() { return cUpdateAboveParserRuleCall_0; }
		
		//UpdateBelow
		public RuleCall getUpdateBelowParserRuleCall_1() { return cUpdateBelowParserRuleCall_1; }
		
		//UpdateChange
		public RuleCall getUpdateChangeParserRuleCall_2() { return cUpdateChangeParserRuleCall_2; }
		
		//UpdateIs
		public RuleCall getUpdateIsParserRuleCall_3() { return cUpdateIsParserRuleCall_3; }
		
		//UpdateNot
		public RuleCall getUpdateNotParserRuleCall_4() { return cUpdateNotParserRuleCall_4; }
	}
	public class OutputPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.OutputProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueOutputValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//OutputProperty:
		//	name=ID ':' value=OutputValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' value=OutputValue
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=OutputValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//OutputValue
		public RuleCall getValueOutputValueParserRuleCall_2_0() { return cValueOutputValueParserRuleCall_2_0; }
	}
	public class OutputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.OutputValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueIntAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIntINTTerminalRuleCall_0_0 = (RuleCall)cValueIntAssignment_0.eContents().get(0);
		private final Assignment cValueStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueStringAssignment_1.eContents().get(0);
		private final Assignment cValueRefAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueRefPropertyReferenceParserRuleCall_2_0 = (RuleCall)cValueRefAssignment_2.eContents().get(0);
		
		//OutputValue:
		//	valueInt=INT | valueString=STRING | valueRef=PropertyReference;
		@Override public ParserRule getRule() { return rule; }
		
		//valueInt=INT | valueString=STRING | valueRef=PropertyReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueInt=INT
		public Assignment getValueIntAssignment_0() { return cValueIntAssignment_0; }
		
		//INT
		public RuleCall getValueIntINTTerminalRuleCall_0_0() { return cValueIntINTTerminalRuleCall_0_0; }
		
		//valueString=STRING
		public Assignment getValueStringAssignment_1() { return cValueStringAssignment_1; }
		
		//STRING
		public RuleCall getValueStringSTRINGTerminalRuleCall_1_0() { return cValueStringSTRINGTerminalRuleCall_1_0; }
		
		//valueRef=PropertyReference
		public Assignment getValueRefAssignment_2() { return cValueRefAssignment_2; }
		
		//PropertyReference
		public RuleCall getValueRefPropertyReferenceParserRuleCall_2_0() { return cValueRefPropertyReferenceParserRuleCall_2_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesOutputPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesOutputPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Output:
		//	{Output} '{'
		//	properties+=OutputProperty (',' properties+=OutputProperty)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Output} '{'
		//properties+=OutputProperty (',' properties+=OutputProperty)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Output}
		public Action getOutputAction_0() { return cOutputAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//properties+=OutputProperty
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }
		
		//OutputProperty
		public RuleCall getPropertiesOutputPropertyParserRuleCall_2_0() { return cPropertiesOutputPropertyParserRuleCall_2_0; }
		
		//(',' properties+=OutputProperty)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//properties+=OutputProperty
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }
		
		//OutputProperty
		public RuleCall getPropertiesOutputPropertyParserRuleCall_3_1_0() { return cPropertiesOutputPropertyParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SourceUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.SourceUpdate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceSourceCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceSourceIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceSourceCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPropertyPropertyCrossReference_2_0 = (CrossReference)cPropertyAssignment_2.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_2_0_1 = (RuleCall)cPropertyPropertyCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpdateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpdateUpdateParserRuleCall_4_0 = (RuleCall)cUpdateAssignment_4.eContents().get(0);
		
		//SourceUpdate:
		//	source=[Source] '.' property=[Property] '.' update=Update;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[Source] '.' property=[Property] '.' update=Update
		public Group getGroup() { return cGroup; }
		
		//source=[Source]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[Source]
		public CrossReference getSourceSourceCrossReference_0_0() { return cSourceSourceCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceSourceIDTerminalRuleCall_0_0_1() { return cSourceSourceIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//property=[Property]
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }
		
		//[Property]
		public CrossReference getPropertyPropertyCrossReference_2_0() { return cPropertyPropertyCrossReference_2_0; }
		
		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_2_0_1() { return cPropertyPropertyIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//update=Update
		public Assignment getUpdateAssignment_4() { return cUpdateAssignment_4; }
		
		//Update
		public RuleCall getUpdateUpdateParserRuleCall_4_0() { return cUpdateUpdateParserRuleCall_4_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUpdatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUpdatesSourceUpdateParserRuleCall_0_0 = (RuleCall)cUpdatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUpdatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUpdatesSourceUpdateParserRuleCall_1_1_0 = (RuleCall)cUpdatesAssignment_1_1.eContents().get(0);
		
		//Rule:
		//	updates+=SourceUpdate ('and' updates+=SourceUpdate)*;
		@Override public ParserRule getRule() { return rule; }
		
		//updates+=SourceUpdate ('and' updates+=SourceUpdate)*
		public Group getGroup() { return cGroup; }
		
		//updates+=SourceUpdate
		public Assignment getUpdatesAssignment_0() { return cUpdatesAssignment_0; }
		
		//SourceUpdate
		public RuleCall getUpdatesSourceUpdateParserRuleCall_0_0() { return cUpdatesSourceUpdateParserRuleCall_0_0; }
		
		//('and' updates+=SourceUpdate)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//updates+=SourceUpdate
		public Assignment getUpdatesAssignment_1_1() { return cUpdatesAssignment_1_1; }
		
		//SourceUpdate
		public RuleCall getUpdatesSourceUpdateParserRuleCall_1_1_0() { return cUpdatesSourceUpdateParserRuleCall_1_1_0; }
	}
	public class ExtendedRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.ExtendedRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleRuleParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutputAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutputOutputParserRuleCall_3_1_0 = (RuleCall)cOutputAssignment_3_1.eContents().get(0);
		private final Keyword cIntoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSinkAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSinkSinkCrossReference_5_0 = (CrossReference)cSinkAssignment_5.eContents().get(0);
		private final RuleCall cSinkSinkIDTerminalRuleCall_5_0_1 = (RuleCall)cSinkSinkCrossReference_5_0.eContents().get(1);
		
		//ExtendedRule:
		//	'rule' name=ID rule=Rule ('=>' output=Output)? 'into' sink=[Sink];
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID rule=Rule ('=>' output=Output)? 'into' sink=[Sink]
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_2_0() { return cRuleRuleParserRuleCall_2_0; }
		
		//('=>' output=Output)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3_0() { return cEqualsSignGreaterThanSignKeyword_3_0; }
		
		//output=Output
		public Assignment getOutputAssignment_3_1() { return cOutputAssignment_3_1; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_3_1_0() { return cOutputOutputParserRuleCall_3_1_0; }
		
		//'into'
		public Keyword getIntoKeyword_4() { return cIntoKeyword_4; }
		
		//sink=[Sink]
		public Assignment getSinkAssignment_5() { return cSinkAssignment_5; }
		
		//[Sink]
		public CrossReference getSinkSinkCrossReference_5_0() { return cSinkSinkCrossReference_5_0; }
		
		//ID
		public RuleCall getSinkSinkIDTerminalRuleCall_5_0_1() { return cSinkSinkIDTerminalRuleCall_5_0_1; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStartRuleStartRuleParserRuleCall_3_0 = (RuleCall)cStartRuleAssignment_3.eContents().get(0);
		private final Assignment cConnectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectionsConnectionsParserRuleCall_4_0 = (RuleCall)cConnectionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Process:
		//	'process' name=ID '{'
		//	startRule=StartRule
		//	connections+=Connections*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'process' name=ID '{'
		//startRule=StartRule
		//connections+=Connections*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//startRule=StartRule
		public Assignment getStartRuleAssignment_3() { return cStartRuleAssignment_3; }
		
		//StartRule
		public RuleCall getStartRuleStartRuleParserRuleCall_3_0() { return cStartRuleStartRuleParserRuleCall_3_0; }
		
		//connections+=Connections*
		public Assignment getConnectionsAssignment_4() { return cConnectionsAssignment_4; }
		
		//Connections
		public RuleCall getConnectionsConnectionsParserRuleCall_4_0() { return cConnectionsConnectionsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConnectionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Connections");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftExtendedRuleCrossReference_0_0 = (CrossReference)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cLeftExtendedRuleIDTerminalRuleCall_0_0_1 = (RuleCall)cLeftExtendedRuleCrossReference_0_0.eContents().get(1);
		private final Assignment cConnectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConnectionConnectionParserRuleCall_1_0 = (RuleCall)cConnectionAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRightExtendedRuleCrossReference_2_0 = (CrossReference)cRightAssignment_2.eContents().get(0);
		private final RuleCall cRightExtendedRuleIDTerminalRuleCall_2_0_1 = (RuleCall)cRightExtendedRuleCrossReference_2_0.eContents().get(1);
		
		//Connections:
		//	left=[ExtendedRule] connection=Connection right=[ExtendedRule];
		@Override public ParserRule getRule() { return rule; }
		
		//left=[ExtendedRule] connection=Connection right=[ExtendedRule]
		public Group getGroup() { return cGroup; }
		
		//left=[ExtendedRule]
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//[ExtendedRule]
		public CrossReference getLeftExtendedRuleCrossReference_0_0() { return cLeftExtendedRuleCrossReference_0_0; }
		
		//ID
		public RuleCall getLeftExtendedRuleIDTerminalRuleCall_0_0_1() { return cLeftExtendedRuleIDTerminalRuleCall_0_0_1; }
		
		//connection=Connection
		public Assignment getConnectionAssignment_1() { return cConnectionAssignment_1; }
		
		//Connection
		public RuleCall getConnectionConnectionParserRuleCall_1_0() { return cConnectionConnectionParserRuleCall_1_0; }
		
		//right=[ExtendedRule]
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//[ExtendedRule]
		public CrossReference getRightExtendedRuleCrossReference_2_0() { return cRightExtendedRuleCrossReference_2_0; }
		
		//ID
		public RuleCall getRightExtendedRuleIDTerminalRuleCall_2_0_1() { return cRightExtendedRuleIDTerminalRuleCall_2_0_1; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.Connection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOneWayConnectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBothWayConnectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Connection:
		//	OneWayConnection | BothWayConnection;
		@Override public ParserRule getRule() { return rule; }
		
		//OneWayConnection | BothWayConnection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneWayConnection
		public RuleCall getOneWayConnectionParserRuleCall_0() { return cOneWayConnectionParserRuleCall_0; }
		
		//BothWayConnection
		public RuleCall getBothWayConnectionParserRuleCall_1() { return cBothWayConnectionParserRuleCall_1; }
	}
	public class OneWayConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.OneWayConnection");
		private final Keyword cHyphenMinusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OneWayConnection:
		//	'->';
		@Override public ParserRule getRule() { return rule; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword() { return cHyphenMinusGreaterThanSignKeyword; }
	}
	public class BothWayConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.BothWayConnection");
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//BothWayConnection:
		//	'<->';
		@Override public ParserRule getRule() { return rule; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword() { return cLessThanSignHyphenMinusGreaterThanSignKeyword; }
	}
	public class StartRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.StartRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//StartRule:
		//	'start' rule=Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//'start' rule=Rule
		public Group getGroup() { return cGroup; }
		
		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_1_0() { return cRuleRuleParserRuleCall_1_0; }
	}
	public class EndRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.EndRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//EndRule:
		//	'end' rule=Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//'end' rule=Rule
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_1_0() { return cRuleRuleParserRuleCall_1_0; }
	}
	public class UpdateAboveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.UpdateAbove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAboveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNINTTerminalRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UpdateAbove:
		//	'above' '(' n=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'above' '(' n=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'above'
		public Keyword getAboveKeyword_0() { return cAboveKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//n=INT
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_2_0() { return cNINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UpdateBelowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.UpdateBelow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBelowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNINTTerminalRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UpdateBelow:
		//	'below' '(' n=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'below' '(' n=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'below'
		public Keyword getBelowKeyword_0() { return cBelowKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//n=INT
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_2_0() { return cNINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UpdateChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.UpdateChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNINTTerminalRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMINTTerminalRuleCall_4_0 = (RuleCall)cMAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UpdateChange:
		//	'change' '(' n=INT ',' m=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'change' '(' n=INT ',' m=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'change'
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//n=INT
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_2_0() { return cNINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//m=INT
		public Assignment getMAssignment_4() { return cMAssignment_4; }
		
		//INT
		public RuleCall getMINTTerminalRuleCall_4_0() { return cMINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class UpdateIsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.UpdateIs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNINTTerminalRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UpdateIs:
		//	'is' '(' n=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'is' '(' n=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'is'
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//n=INT
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_2_0() { return cNINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UpdateNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.UpdateNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNINTTerminalRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UpdateNot:
		//	'not' '(' n=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'not' '(' n=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//n=INT
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_2_0() { return cNINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	public class PrimitiveTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.dtu.s144874.thesis.ppid.Ppid.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNumberEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNumberNumberKeyword_0_0 = (Keyword)cNumberEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PrimitiveType:
		//	number | string;
		public EnumRule getRule() { return rule; }
		
		//number | string
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number
		public EnumLiteralDeclaration getNumberEnumLiteralDeclaration_0() { return cNumberEnumLiteralDeclaration_0; }
		
		//"number"
		public Keyword getNumberNumberKeyword_0_0() { return cNumberNumberKeyword_0_0; }
		
		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }
		
		//"string"
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final SourceElements pSource;
	private final SinkElements pSink;
	private final TypeElements pType;
	private final ArrayTypeElements pArrayType;
	private final EntityReferenceElements pEntityReference;
	private final SimpleDataTypeElements pSimpleDataType;
	private final PrimitiveTypeElements ePrimitiveType;
	private final PropertyElements pProperty;
	private final PropertyReferenceElements pPropertyReference;
	private final UpdateElements pUpdate;
	private final OutputPropertyElements pOutputProperty;
	private final OutputValueElements pOutputValue;
	private final OutputElements pOutput;
	private final SourceUpdateElements pSourceUpdate;
	private final RuleElements pRule;
	private final ExtendedRuleElements pExtendedRule;
	private final ProcessElements pProcess;
	private final ConnectionsElements pConnections;
	private final ConnectionElements pConnection;
	private final OneWayConnectionElements pOneWayConnection;
	private final BothWayConnectionElements pBothWayConnection;
	private final StartRuleElements pStartRule;
	private final EndRuleElements pEndRule;
	private final UpdateAboveElements pUpdateAbove;
	private final UpdateBelowElements pUpdateBelow;
	private final UpdateChangeElements pUpdateChange;
	private final UpdateIsElements pUpdateIs;
	private final UpdateNotElements pUpdateNot;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PpidGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pSource = new SourceElements();
		this.pSink = new SinkElements();
		this.pType = new TypeElements();
		this.pArrayType = new ArrayTypeElements();
		this.pEntityReference = new EntityReferenceElements();
		this.pSimpleDataType = new SimpleDataTypeElements();
		this.ePrimitiveType = new PrimitiveTypeElements();
		this.pProperty = new PropertyElements();
		this.pPropertyReference = new PropertyReferenceElements();
		this.pUpdate = new UpdateElements();
		this.pOutputProperty = new OutputPropertyElements();
		this.pOutputValue = new OutputValueElements();
		this.pOutput = new OutputElements();
		this.pSourceUpdate = new SourceUpdateElements();
		this.pRule = new RuleElements();
		this.pExtendedRule = new ExtendedRuleElements();
		this.pProcess = new ProcessElements();
		this.pConnections = new ConnectionsElements();
		this.pConnection = new ConnectionElements();
		this.pOneWayConnection = new OneWayConnectionElements();
		this.pBothWayConnection = new BothWayConnectionElements();
		this.pStartRule = new StartRuleElements();
		this.pEndRule = new EndRuleElements();
		this.pUpdateAbove = new UpdateAboveElements();
		this.pUpdateBelow = new UpdateBelowElements();
		this.pUpdateChange = new UpdateChangeElements();
		this.pUpdateIs = new UpdateIsElements();
		this.pUpdateNot = new UpdateNotElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.dtu.s144874.thesis.ppid.Ppid".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////@source(type = 'mqtt', url = "tcp://127.0.0.1:1883", client.id = "siddhidsi", topic = "f/i/state/dsi", 
	////	@map(type = 'json'))
	////define stream SmartFactoryDsiStream (active int, code int, description string, station string, ts string);
	////@sink(type='log') 
	////define stream SiddhiProductionOut (processName string, activityName string, state string, resource string, ts string);
	//Model:
	//	entites+=Entity*
	//	sources+=Source*
	//	sinks+=Sink*
	//	rules+=ExtendedRule*
	//	start=StartRule?
	//	end=EndRule?
	//	processes+=Process*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID '{'
	//	properties+=Property*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Source:
	//	'source' name=ID topic=STRING entity=[Entity];
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//Sink:
	//	'sink' name=ID entity=[Entity];
	public SinkElements getSinkAccess() {
		return pSink;
	}
	
	public ParserRule getSinkRule() {
		return getSinkAccess().getRule();
	}
	
	//Type:
	//	EntityReference | SimpleDataType | ArrayType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//ArrayType:
	//	'[' type=Type ']';
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//EntityReference:
	//	entity=[Entity];
	public EntityReferenceElements getEntityReferenceAccess() {
		return pEntityReference;
	}
	
	public ParserRule getEntityReferenceRule() {
		return getEntityReferenceAccess().getRule();
	}
	
	//SimpleDataType:
	//	type=PrimitiveType;
	public SimpleDataTypeElements getSimpleDataTypeAccess() {
		return pSimpleDataType;
	}
	
	public ParserRule getSimpleDataTypeRule() {
		return getSimpleDataTypeAccess().getRule();
	}
	
	//enum PrimitiveType:
	//	number | string;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return ePrimitiveType;
	}
	
	public EnumRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//Property:
	//	name=ID ':' type=Type;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//PropertyReference:
	//	name=ID;
	public PropertyReferenceElements getPropertyReferenceAccess() {
		return pPropertyReference;
	}
	
	public ParserRule getPropertyReferenceRule() {
		return getPropertyReferenceAccess().getRule();
	}
	
	//Update:
	//	UpdateAbove | UpdateBelow | UpdateChange | UpdateIs | UpdateNot;
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//OutputProperty:
	//	name=ID ':' value=OutputValue;
	public OutputPropertyElements getOutputPropertyAccess() {
		return pOutputProperty;
	}
	
	public ParserRule getOutputPropertyRule() {
		return getOutputPropertyAccess().getRule();
	}
	
	//OutputValue:
	//	valueInt=INT | valueString=STRING | valueRef=PropertyReference;
	public OutputValueElements getOutputValueAccess() {
		return pOutputValue;
	}
	
	public ParserRule getOutputValueRule() {
		return getOutputValueAccess().getRule();
	}
	
	//Output:
	//	{Output} '{'
	//	properties+=OutputProperty (',' properties+=OutputProperty)*
	//	'}';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//SourceUpdate:
	//	source=[Source] '.' property=[Property] '.' update=Update;
	public SourceUpdateElements getSourceUpdateAccess() {
		return pSourceUpdate;
	}
	
	public ParserRule getSourceUpdateRule() {
		return getSourceUpdateAccess().getRule();
	}
	
	//Rule:
	//	updates+=SourceUpdate ('and' updates+=SourceUpdate)*;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//ExtendedRule:
	//	'rule' name=ID rule=Rule ('=>' output=Output)? 'into' sink=[Sink];
	public ExtendedRuleElements getExtendedRuleAccess() {
		return pExtendedRule;
	}
	
	public ParserRule getExtendedRuleRule() {
		return getExtendedRuleAccess().getRule();
	}
	
	//Process:
	//	'process' name=ID '{'
	//	startRule=StartRule
	//	connections+=Connections*
	//	'}';
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//Connections:
	//	left=[ExtendedRule] connection=Connection right=[ExtendedRule];
	public ConnectionsElements getConnectionsAccess() {
		return pConnections;
	}
	
	public ParserRule getConnectionsRule() {
		return getConnectionsAccess().getRule();
	}
	
	//Connection:
	//	OneWayConnection | BothWayConnection;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//OneWayConnection:
	//	'->';
	public OneWayConnectionElements getOneWayConnectionAccess() {
		return pOneWayConnection;
	}
	
	public ParserRule getOneWayConnectionRule() {
		return getOneWayConnectionAccess().getRule();
	}
	
	//BothWayConnection:
	//	'<->';
	public BothWayConnectionElements getBothWayConnectionAccess() {
		return pBothWayConnection;
	}
	
	public ParserRule getBothWayConnectionRule() {
		return getBothWayConnectionAccess().getRule();
	}
	
	//StartRule:
	//	'start' rule=Rule;
	public StartRuleElements getStartRuleAccess() {
		return pStartRule;
	}
	
	public ParserRule getStartRuleRule() {
		return getStartRuleAccess().getRule();
	}
	
	//EndRule:
	//	'end' rule=Rule;
	public EndRuleElements getEndRuleAccess() {
		return pEndRule;
	}
	
	public ParserRule getEndRuleRule() {
		return getEndRuleAccess().getRule();
	}
	
	//UpdateAbove:
	//	'above' '(' n=INT ')';
	public UpdateAboveElements getUpdateAboveAccess() {
		return pUpdateAbove;
	}
	
	public ParserRule getUpdateAboveRule() {
		return getUpdateAboveAccess().getRule();
	}
	
	//UpdateBelow:
	//	'below' '(' n=INT ')';
	public UpdateBelowElements getUpdateBelowAccess() {
		return pUpdateBelow;
	}
	
	public ParserRule getUpdateBelowRule() {
		return getUpdateBelowAccess().getRule();
	}
	
	//UpdateChange:
	//	'change' '(' n=INT ',' m=INT ')';
	public UpdateChangeElements getUpdateChangeAccess() {
		return pUpdateChange;
	}
	
	public ParserRule getUpdateChangeRule() {
		return getUpdateChangeAccess().getRule();
	}
	
	//UpdateIs:
	//	'is' '(' n=INT ')';
	public UpdateIsElements getUpdateIsAccess() {
		return pUpdateIs;
	}
	
	public ParserRule getUpdateIsRule() {
		return getUpdateIsAccess().getRule();
	}
	
	//UpdateNot:
	//	'not' '(' n=INT ')';
	public UpdateNotElements getUpdateNotAccess() {
		return pUpdateNot;
	}
	
	public ParserRule getUpdateNotRule() {
		return getUpdateNotAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
