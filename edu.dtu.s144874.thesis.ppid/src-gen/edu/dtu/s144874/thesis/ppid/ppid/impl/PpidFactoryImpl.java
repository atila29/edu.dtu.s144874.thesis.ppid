/**
 * generated by Xtext 2.24.0
 */
package edu.dtu.s144874.thesis.ppid.ppid.impl;

import edu.dtu.s144874.thesis.ppid.ppid.ArrayType;
import edu.dtu.s144874.thesis.ppid.ppid.Connections;
import edu.dtu.s144874.thesis.ppid.ppid.EndRule;
import edu.dtu.s144874.thesis.ppid.ppid.Entity;
import edu.dtu.s144874.thesis.ppid.ppid.EntityReference;
import edu.dtu.s144874.thesis.ppid.ppid.ExtendedRule;
import edu.dtu.s144874.thesis.ppid.ppid.Model;
import edu.dtu.s144874.thesis.ppid.ppid.Output;
import edu.dtu.s144874.thesis.ppid.ppid.OutputProperty;
import edu.dtu.s144874.thesis.ppid.ppid.OutputValue;
import edu.dtu.s144874.thesis.ppid.ppid.PpidFactory;
import edu.dtu.s144874.thesis.ppid.ppid.PpidPackage;
import edu.dtu.s144874.thesis.ppid.ppid.PrimitiveType;
import edu.dtu.s144874.thesis.ppid.ppid.Property;
import edu.dtu.s144874.thesis.ppid.ppid.PropertyReference;
import edu.dtu.s144874.thesis.ppid.ppid.Rule;
import edu.dtu.s144874.thesis.ppid.ppid.SimpleDataType;
import edu.dtu.s144874.thesis.ppid.ppid.Sink;
import edu.dtu.s144874.thesis.ppid.ppid.Source;
import edu.dtu.s144874.thesis.ppid.ppid.SourceUpdate;
import edu.dtu.s144874.thesis.ppid.ppid.StartRule;
import edu.dtu.s144874.thesis.ppid.ppid.Type;
import edu.dtu.s144874.thesis.ppid.ppid.Update;
import edu.dtu.s144874.thesis.ppid.ppid.UpdateAbove;
import edu.dtu.s144874.thesis.ppid.ppid.UpdateBelow;
import edu.dtu.s144874.thesis.ppid.ppid.UpdateChange;
import edu.dtu.s144874.thesis.ppid.ppid.UpdateIs;
import edu.dtu.s144874.thesis.ppid.ppid.UpdateNot;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PpidFactoryImpl extends EFactoryImpl implements PpidFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PpidFactory init()
  {
    try
    {
      PpidFactory thePpidFactory = (PpidFactory)EPackage.Registry.INSTANCE.getEFactory(PpidPackage.eNS_URI);
      if (thePpidFactory != null)
      {
        return thePpidFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PpidFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PpidFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PpidPackage.MODEL: return createModel();
      case PpidPackage.ENTITY: return createEntity();
      case PpidPackage.SOURCE: return createSource();
      case PpidPackage.SINK: return createSink();
      case PpidPackage.TYPE: return createType();
      case PpidPackage.ARRAY_TYPE: return createArrayType();
      case PpidPackage.ENTITY_REFERENCE: return createEntityReference();
      case PpidPackage.SIMPLE_DATA_TYPE: return createSimpleDataType();
      case PpidPackage.PROPERTY: return createProperty();
      case PpidPackage.PROPERTY_REFERENCE: return createPropertyReference();
      case PpidPackage.UPDATE: return createUpdate();
      case PpidPackage.OUTPUT_PROPERTY: return createOutputProperty();
      case PpidPackage.OUTPUT_VALUE: return createOutputValue();
      case PpidPackage.OUTPUT: return createOutput();
      case PpidPackage.SOURCE_UPDATE: return createSourceUpdate();
      case PpidPackage.RULE: return createRule();
      case PpidPackage.EXTENDED_RULE: return createExtendedRule();
      case PpidPackage.PROCESS: return createProcess();
      case PpidPackage.CONNECTIONS: return createConnections();
      case PpidPackage.START_RULE: return createStartRule();
      case PpidPackage.END_RULE: return createEndRule();
      case PpidPackage.UPDATE_ABOVE: return createUpdateAbove();
      case PpidPackage.UPDATE_BELOW: return createUpdateBelow();
      case PpidPackage.UPDATE_CHANGE: return createUpdateChange();
      case PpidPackage.UPDATE_IS: return createUpdateIs();
      case PpidPackage.UPDATE_NOT: return createUpdateNot();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PpidPackage.PRIMITIVE_TYPE:
        return createPrimitiveTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PpidPackage.PRIMITIVE_TYPE:
        return convertPrimitiveTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Source createSource()
  {
    SourceImpl source = new SourceImpl();
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sink createSink()
  {
    SinkImpl sink = new SinkImpl();
    return sink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayType createArrayType()
  {
    ArrayTypeImpl arrayType = new ArrayTypeImpl();
    return arrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityReference createEntityReference()
  {
    EntityReferenceImpl entityReference = new EntityReferenceImpl();
    return entityReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleDataType createSimpleDataType()
  {
    SimpleDataTypeImpl simpleDataType = new SimpleDataTypeImpl();
    return simpleDataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyReference createPropertyReference()
  {
    PropertyReferenceImpl propertyReference = new PropertyReferenceImpl();
    return propertyReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Update createUpdate()
  {
    UpdateImpl update = new UpdateImpl();
    return update;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputProperty createOutputProperty()
  {
    OutputPropertyImpl outputProperty = new OutputPropertyImpl();
    return outputProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputValue createOutputValue()
  {
    OutputValueImpl outputValue = new OutputValueImpl();
    return outputValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Output createOutput()
  {
    OutputImpl output = new OutputImpl();
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SourceUpdate createSourceUpdate()
  {
    SourceUpdateImpl sourceUpdate = new SourceUpdateImpl();
    return sourceUpdate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExtendedRule createExtendedRule()
  {
    ExtendedRuleImpl extendedRule = new ExtendedRuleImpl();
    return extendedRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public edu.dtu.s144874.thesis.ppid.ppid.Process createProcess()
  {
    ProcessImpl process = new ProcessImpl();
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connections createConnections()
  {
    ConnectionsImpl connections = new ConnectionsImpl();
    return connections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartRule createStartRule()
  {
    StartRuleImpl startRule = new StartRuleImpl();
    return startRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndRule createEndRule()
  {
    EndRuleImpl endRule = new EndRuleImpl();
    return endRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateAbove createUpdateAbove()
  {
    UpdateAboveImpl updateAbove = new UpdateAboveImpl();
    return updateAbove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateBelow createUpdateBelow()
  {
    UpdateBelowImpl updateBelow = new UpdateBelowImpl();
    return updateBelow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateChange createUpdateChange()
  {
    UpdateChangeImpl updateChange = new UpdateChangeImpl();
    return updateChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateIs createUpdateIs()
  {
    UpdateIsImpl updateIs = new UpdateIsImpl();
    return updateIs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateNot createUpdateNot()
  {
    UpdateNotImpl updateNot = new UpdateNotImpl();
    return updateNot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveType createPrimitiveTypeFromString(EDataType eDataType, String initialValue)
  {
    PrimitiveType result = PrimitiveType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPrimitiveTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PpidPackage getPpidPackage()
  {
    return (PpidPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PpidPackage getPackage()
  {
    return PpidPackage.eINSTANCE;
  }

} //PpidFactoryImpl
