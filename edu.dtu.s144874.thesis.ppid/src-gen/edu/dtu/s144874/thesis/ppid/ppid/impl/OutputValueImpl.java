/**
 * generated by Xtext 2.24.0
 */
package edu.dtu.s144874.thesis.ppid.ppid.impl;

import edu.dtu.s144874.thesis.ppid.ppid.OutputValue;
import edu.dtu.s144874.thesis.ppid.ppid.PpidPackage;
import edu.dtu.s144874.thesis.ppid.ppid.PropertyReference;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Output Value</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.dtu.s144874.thesis.ppid.ppid.impl.OutputValueImpl#getValueInt <em>Value Int</em>}</li>
 *   <li>{@link edu.dtu.s144874.thesis.ppid.ppid.impl.OutputValueImpl#getValueString <em>Value String</em>}</li>
 *   <li>{@link edu.dtu.s144874.thesis.ppid.ppid.impl.OutputValueImpl#getValueRef <em>Value Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OutputValueImpl extends MinimalEObjectImpl.Container implements OutputValue
{
  /**
   * The default value of the '{@link #getValueInt() <em>Value Int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueInt()
   * @generated
   * @ordered
   */
  protected static final int VALUE_INT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getValueInt() <em>Value Int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueInt()
   * @generated
   * @ordered
   */
  protected int valueInt = VALUE_INT_EDEFAULT;

  /**
   * The default value of the '{@link #getValueString() <em>Value String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueString()
   * @generated
   * @ordered
   */
  protected static final String VALUE_STRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValueString() <em>Value String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueString()
   * @generated
   * @ordered
   */
  protected String valueString = VALUE_STRING_EDEFAULT;

  /**
   * The cached value of the '{@link #getValueRef() <em>Value Ref</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueRef()
   * @generated
   * @ordered
   */
  protected PropertyReference valueRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OutputValueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PpidPackage.Literals.OUTPUT_VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValueInt()
  {
    return valueInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueInt(int newValueInt)
  {
    int oldValueInt = valueInt;
    valueInt = newValueInt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PpidPackage.OUTPUT_VALUE__VALUE_INT, oldValueInt, valueInt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValueString()
  {
    return valueString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueString(String newValueString)
  {
    String oldValueString = valueString;
    valueString = newValueString;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PpidPackage.OUTPUT_VALUE__VALUE_STRING, oldValueString, valueString));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyReference getValueRef()
  {
    return valueRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValueRef(PropertyReference newValueRef, NotificationChain msgs)
  {
    PropertyReference oldValueRef = valueRef;
    valueRef = newValueRef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PpidPackage.OUTPUT_VALUE__VALUE_REF, oldValueRef, newValueRef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueRef(PropertyReference newValueRef)
  {
    if (newValueRef != valueRef)
    {
      NotificationChain msgs = null;
      if (valueRef != null)
        msgs = ((InternalEObject)valueRef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PpidPackage.OUTPUT_VALUE__VALUE_REF, null, msgs);
      if (newValueRef != null)
        msgs = ((InternalEObject)newValueRef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PpidPackage.OUTPUT_VALUE__VALUE_REF, null, msgs);
      msgs = basicSetValueRef(newValueRef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PpidPackage.OUTPUT_VALUE__VALUE_REF, newValueRef, newValueRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PpidPackage.OUTPUT_VALUE__VALUE_REF:
        return basicSetValueRef(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PpidPackage.OUTPUT_VALUE__VALUE_INT:
        return getValueInt();
      case PpidPackage.OUTPUT_VALUE__VALUE_STRING:
        return getValueString();
      case PpidPackage.OUTPUT_VALUE__VALUE_REF:
        return getValueRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PpidPackage.OUTPUT_VALUE__VALUE_INT:
        setValueInt((Integer)newValue);
        return;
      case PpidPackage.OUTPUT_VALUE__VALUE_STRING:
        setValueString((String)newValue);
        return;
      case PpidPackage.OUTPUT_VALUE__VALUE_REF:
        setValueRef((PropertyReference)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PpidPackage.OUTPUT_VALUE__VALUE_INT:
        setValueInt(VALUE_INT_EDEFAULT);
        return;
      case PpidPackage.OUTPUT_VALUE__VALUE_STRING:
        setValueString(VALUE_STRING_EDEFAULT);
        return;
      case PpidPackage.OUTPUT_VALUE__VALUE_REF:
        setValueRef((PropertyReference)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PpidPackage.OUTPUT_VALUE__VALUE_INT:
        return valueInt != VALUE_INT_EDEFAULT;
      case PpidPackage.OUTPUT_VALUE__VALUE_STRING:
        return VALUE_STRING_EDEFAULT == null ? valueString != null : !VALUE_STRING_EDEFAULT.equals(valueString);
      case PpidPackage.OUTPUT_VALUE__VALUE_REF:
        return valueRef != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (valueInt: ");
    result.append(valueInt);
    result.append(", valueString: ");
    result.append(valueString);
    result.append(')');
    return result.toString();
  }

} //OutputValueImpl
