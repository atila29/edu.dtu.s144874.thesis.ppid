grammar edu.dtu.s144874.thesis.ppid.Ppid with org.eclipse.xtext.common.Terminals

generate ppid "http://www.dtu.edu/s144874/thesis/ppid/Ppid"


import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//@source(type = 'mqtt', url = "tcp://127.0.0.1:1883", client.id = "siddhidsi", topic = "f/i/state/dsi", 
//	@map(type = 'json'))
//define stream SmartFactoryDsiStream (active int, code int, description string, station string, ts string);


//@sink(type='log') 
//define stream SiddhiProductionOut (processName string, activityName string, state string, resource string, ts string);

Model:
//	start=StartRule?
//    end=EndRule?
	globalsVars+=GlobalVar*

    (entites+=Entity |
    sources+=Source |
    sinks+=Sink |
    processes+=Process )*
;



Entity:
    'entity' name=ID '{'
    (properties+=Property)*
    '}';
    
Source:
	'source' name=ID topic=STRING entity=[Entity]
;

Sink:
	'sink' name=ID entity=[Entity]
;

Type:
    EntityReference | SimpleDataType | ArrayType;
    
ArrayType:
   	'['type=Type']'
   ;

EntityReference:
    entity=[Entity];

SimpleDataType:
    type=PrimitiveType;


enum PrimitiveType:
    number | string;

Property:
    name=ID ':' type=Type;
    
//PropertyReference:
//   name=ID;
//    

Update:
	UpdateAbove | UpdateBelow | UpdateChange | UpdateIs | UpdateNot
;

OutputProperty:
	property=[Property] ':'  exp=ExtendedExpression
;
//
//OutputValue:
//	(valueInt=INT | valueString=STRING | valueRef=PropertyReference)
//;

Output:
	{Output} '{'
	properties+=OutputProperty
    (',' properties+=OutputProperty)*
    '}'
;

//SourceUpdate:
//	source=[Source] '.' property=[Property] '.' update=Update 
//;
//
//Rule:
//	updates+=SourceUpdate ('and' updates+=SourceUpdate)*
//;

Activity:
	'activity' name=ID '{'
		trigger+=Trigger*
	'}'
;

//ExtendedRule:
//	'rule' name=ID rule=Rule ('=>' output=Output)? ('into' sink=[Sink])?
//;

Predicates:
	predicates+=Predicate ('and' predicates+=Predicate)*
;

Predicate:
	source=[Source] '.' property=[Property] '.' update=Update 
;

Trigger:
	'on' predicates=Predicates ('=>' command=Command)?
;

Command:
	SetVarCommand | OutputCommand
;

OutputCommand:
	(output=Output)? 'into' sink=[Sink]
;

//Expression:
//    TerminalExpression (Operator TerminalExpression)*;
// 
//TerminalExpression:
//    '(' Expression ')' | 
//    (INT);
//    
ExtendedExpression:
	left=ExpressionPart right+=RightExpression*
;

RightExpression:
	operator=Operator exp=ExpressionPart
;

ExpressionPart:
	 ref=StatefulPropertyReference | value=INT | stringValue=STRING
;

StatefulPropertyReference:
	(source=[Source]'.' property=[Property]) | (('global.' source=[GlobalVar]) ('.' property=[Property])?)
;


GlobalVar:
	'let' name=ID ':' type=Type
;

SetVarCommand:
	'set' id=[GlobalVar] '=' assignment=(ExtendedExpression | Output)
;



//ExtendedRule:
//	'rule' name=ID rule=Rule ('=>' output=Output)? 'into' sink=[Sink]
//;

Process:
	'process' name=ID '{'
	activities+=(Activity)*
	connections+=(Connection)*
	'}'
;

Connection:
	left=[Activity] connection=ConnectionType right=[Activity]
;



//StartRule:
//	'start' rule=Rule
//;
//
//EndRule:
//	'end' rule=Rule
//;

UpdateAbove:
	'above''('n=INT')'
;

UpdateBelow:
	'below''('n=INT')'
;

UpdateChange:
	'change''('n=INT',' m=INT')'
;

UpdateIs:
	'is''('n=INT')'
;

UpdateNot:
	'not''('n=INT')'
;

ConnectionType:
	(OneWayConnection | BothWayConnection)
;

OneWayConnection:
	'->'
;

BothWayConnection:
	'<->'
;

Operator:
	PlusOperator | MinusOperator | MultiplicationOperator | DivisionOperator
;

PlusOperator:
	'+'
;

MinusOperator:
	'-'
;

MultiplicationOperator:
	'*'
;

DivisionOperator:
	'/'
;
